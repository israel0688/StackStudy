{"version":3,"sources":["pages/navbar.js","utils/mutations.js","utils/queries.js","pages/sub2.js","utils/auth.js","pages/login.js","pages/signup.js","pages/Cardbody.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","props","className","map","tab","key","id","href","onClick","handlePageChange","currentPage","LOGIN_USER","gql","ADD_USER","ADD_CARD","QUERY_CARDS","QUERY_ME","Sub2","data","useQuery","card","cards","useState","frontText","setFrontText","backText","setBackText","characterCount","setCharacterCount","useMutation","update","cache","addCard","readQuery","query","writeQuery","e","console","error","me","handleFormSubmit","event","a","preventDefault","variables","window","location","reload","onSubmit","placeholder","value","onChange","target","length","type","frontcard","decode","this","getToken","token","isTokenExpired","exp","Date","now","err","localStorage","getItem","idToken","setItem","assign","removeItem","Login","email","password","formState","setFormState","login","handleChange","name","Auth","Signup","username","addUser","CardBody","classname","renderCard","client","ApolloClient","request","operation","setContext","headers","authorization","uri","App","Cardbody","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.7480f824.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction Navbar(props) {\n    const tabs = ['Your Cards', \"login\", \"signup\"]\n    return(\n        <ul className='nav' >\n            <div  className=\"nav-list\">\n            {tabs.map(tab => (\n                <li className=\"nav-list\" key={tab}>\n                    <a id=\"nav-list-a\" href={'#' + tab}\n                    onClick={()=> props.handlePageChange(tab)}\n                \n                    className={\n                        props.currentPage === tab  ?  'nav-link active' : 'nav-link'\n                       \n                    }\n                    >\n                        {tab}\n                    </a>\n                </li>\n            ))}\n            </div>\n        </ul>\n\n    )\n}\n\nexport default Navbar;","import gql from 'graphql-tag';\n\n\nexport const LOGIN_USER = gql`\n  mutation login($email: String!, $password: String!) {\n    login(email: $email, password: $password) {\n      token\n      user {\n        _id\n        username\n      }\n    }\n  }\n`;\n\nexport const ADD_USER = gql`\n  mutation addUser($username: String!, $email: String!, $password: String!) {\n    addUser(username: $username, email: $email, password: $password) {\n      token\n      user {\n        _id\n        username\n      }\n    }\n  }\n`;\n\nexport const ADD_CARD = gql `\nmutation addCards($frontText: String!, $backText: String!) {\n  addCard(frontText:$frontText, backText: $backText) {\n      _id\n      frontText\n    \tbackText\n  }\n}\n`;\n\n/*\nexport const DELETE_CARD = gql `\nmutation deleteCard($id: ID!) {\n  deleteCard($id: ID!) {\n    _id\n  }\n}\n`;\n*/\n// export const ADD_SUBJECT = gql`\n//     mutation addSubject($name: String!) {\n//         addSubject(name: $name) {\n//             _id\n//             name\n//             cards {\n//                 _id\n//             }\n//         }\n//     }\n// `;\n","import gql from 'graphql-tag';\n\n\nexport const QUERY_USER = gql`\nquery users{\n    users {\n      username\n      email\n    }\n  } \n`;\n\n\n// export const QUERY_SUBJECT = gql`\n//   query subject{\n//     subjects{\n//       _id\n//       name\n//       cards {\n//         _id\n//         frontText\n//         backText\n//       }\n//     }\n//   }\n//   `;\n\n  export const QUERY_CARDS = gql`\n  query cards{\n    cards {\n      _id\n      frontText\n      backText\n    }\n  } \n  `;\n\n  export const QUERY_ME = gql `\n    query me {\n      username\n        cards{\n          _id\n          frontText\n          backText\n        }\n    }\n  `;","import React, { useState } from 'react';\nimport { useMutation } from '@apollo/react-hooks';\nimport { ADD_CARD } from '../utils/mutations';\nimport { QUERY_ME, QUERY_CARDS } from '../utils/queries';\nimport { useQuery } from '@apollo/react-hooks';\n\nfunction refreshPage(){\n  window.location.reload(false)\n}\n\n//import Sub3 from './sub3';\n//import Auth from '../utils/auth';\nconst Sub2 = () => {\n    const {data} = useQuery(QUERY_CARDS)\n    const card = data?.cards || []\n    const [frontText, setFrontText] = useState('');\n    const [backText, setBackText] = useState('');\n    const [characterCount, setCharacterCount] = useState(0);\n    const [addCard] = useMutation(ADD_CARD, {\n        update(cache, {data: {addCard}}) {\n            try{\n            // read what's in cache\n            const {cards} = cache.readQuery({query: QUERY_CARDS});\n            // prepend the newest thought to array\n            cache.writeQuery({\n                query: QUERY_CARDS,\n                data: {cards: [addCard, ...cards]}\n            });\n        } catch (e) {\n            console.error(e);\n        }\n        //update me object cache with new thought\n        const{me} = cache.readQuery({query: QUERY_ME});\n         cache.writeQuery({\n             query: QUERY_ME,\n             data: {me: {...me,cards:[...me.cards,addCard]}}\n         });\n        }\n    });\n    const handleFrontChange = event => {\n        if(event.target.value.length <= 280) {\n            setFrontText(event.target.value);\n            setCharacterCount(event.target.value.length);\n        }\n    };\n\n    const handleBackChange = event => {\n      if(event.target.value.length <= 280) {\n          setBackText(event.target.value);\n          setCharacterCount(event.target.value.length);\n      }\n  };\n    const handleFormSubmit = async event => {\n        event.preventDefault();\n       try {\n           //add to db\n           await addCard({\n               variables: {frontText, backText}\n           });\n           //clear form\n           setFrontText('');\n           setBackText('');\n           setCharacterCount(0);\n       } catch (e) {\n           console.error(e)\n       }\n       refreshPage();\n    };\n\n  \n    \n   \n  return (\n    <div>\n        <div className='logincard'>\n          <div className='login-card-outer'>\n            <div className='login-card-header'>\n            <p className={`m-0 ${characterCount === 280 ? 'text-error' : ''}`}>\n        Character Count: {characterCount}/280</p>\n              <div className='login-card-body'>\n      <form className=\"flex-row justify-center justify-space-between-md align-stretch\"\n      onSubmit={handleFormSubmit}>\n        <textarea\n          placeholder=\"Enter Front Text\"\n          value={frontText}\n          className=\"form-input col-12 col-md-9\"\n          onChange={handleFrontChange}\n        ></textarea>\n        <textarea\n          placeholder=\"Enter Back Text\"\n          value={backText}\n          className=\"form-input col-12 col-md-9\"\n          onChange={handleBackChange}\n        ></textarea>\n        <button className=\"btn col-12 col-md-3\" type=\"submit\">\n          Submit\n        </button>\n      </form>\n      </div></div></div></div>\n      <div className=\"wholecard\">\n        <div className=\"cardflip-div\">\n      {card.map(frontcard =>{\n      return <div className=\"flip-card\">\n      <div className=\"flip-card-inner\" key={frontcard.id}>\n        <div  className=\"flip-card-front\"><br></br><br></br>{frontcard.frontText}</div>\n        <div  className=\"flip-card-back\"><br></br><br></br><br></br><br></br>{frontcard.backText}</div>\n        </div>\n        <button className=\"btn btn2 col-12 col-md-3\" type=\"submit\" >Delete</button>\n        </div>\n      })}\n       </div>\n    </div>\n  \n   \n    </div>\n  );\n};\n\nexport default Sub2;\n\n/*\n   {card.map(frontcard =>{\n        return <div key={frontcard.id}>\n        <div className=\"frontcard\">{frontcard.frontText}</div>\n        </div>\n      })}\n\n      {card.map(frontcard =>{\n        return <div key={frontcard.id}>\n        <div className=\"backcard\">{frontcard.backText}</div>\n        </div>\n      })} \n\n\nimport React, { useState } from 'react';\nimport { useMutation } from '@apollo/react-hooks';\nimport { ADD_CARD } from '../utils/mutations';\nimport { QUERY_CARDS, QUERY_ME } from '../utils/queries';\nimport Sub3 from './sub3';\nimport Auth from '../utils/auth';\nimport { useQuery } from '@apollo/react-hooks';\n\nconst Sub2 = () => {\n    const [addCard, { error }] = useMutation(ADD_CARD);\n\n    const [formState, setFormState] = useState({frontText:'', backText:''});\n\n    const handleFormSubmit = async event => {\n        event.preventDefault();\n\n        const mutationResponse = await addCard({\n            variables: {\n                frontText: formState.frontText,\n                backText: formState.backText\n            }\n        });\n    }\n\n    const handleChange = event => {\n        const { name, value } = event.target;\n        setFormState({\n            ...formState,\n            [name]: value\n        });\n    };\n\n    return (\n        <div className=\"container my-1\">\n  \n        <h2>Signup</h2>\n        <form onSubmit={handleFormSubmit}>\n          <div className=\"flex-row space-between my-2\">\n            <label htmlFor=\"firstName\">Front Text:</label>\n            <textarea\n              placeholder=\"Front\"\n              name=\"front\"\n              type=\"firstName\"\n              id=\"frontText\"\n              onChange={handleChange}\n            />\n          </div>\n          <div className=\"flex-row space-between my-2\">\n            <label htmlFor=\"lastName\">Back Text</label>\n            <textarea\n              placeholder=\"Back\"\n              name=\"back\"\n              type=\"lastName\"\n              id=\"lastName\"\n              onChange={handleChange}\n            />\n          </div>\n        \n            <button type=\"submit\">\n              Submit\n            </button>\n        </form>\n      </div>\n    );\n};\n\nexport default Sub2;\n*/","import decode from 'jwt-decode';\n\nclass AuthService {\n    // retrieve data saved in token\n    getProfile() {\n      return decode(this.getToken());\n    }\n  \n    // check if the user is still logged in\n    loggedIn() {\n      // Checks if there is a saved token and it's still valid\n      const token = this.getToken();\n      // use type coersion to check if token is NOT undefined and the token is NOT expired\n      return !!token && !this.isTokenExpired(token);\n    }\n  \n    // check if the token has expired\n    isTokenExpired(token) {\n      try {\n        const decoded = decode(token);\n        if (decoded.exp < Date.now() / 1000) {\n          return true;\n        } else {\n          return false;\n        }\n      } catch (err) {\n        return false;\n      }\n    }\n  \n    // retrieve token from localStorage\n    getToken() {\n      // Retrieves the user token from localStorage\n      return localStorage.getItem('id_token');\n    }\n  \n    // set token to localStorage and reload page to homepage\n    login(idToken) {\n      // Saves user token to localStorage\n      localStorage.setItem('id_token', idToken);\n  \n      window.location.assign('/');\n    }\n  \n    // clear token from localStorage and force logout with reload\n    logout() {\n      // Clear user token and profile data from localStorage\n      localStorage.removeItem('id_token');\n      // this will reload the page and reset the state of the application\n      window.location.assign('/');\n    }\n  }\n\nexport default new AuthService();","import React, { useState } from 'react';\nimport { useMutation } from '@apollo/react-hooks';\nimport { LOGIN_USER } from '../utils/mutations';\nimport Auth from '../utils/auth';\n\n\nconst Login = (props) => {\n  const [formState, setFormState] = useState({ email: '', password: '' });\n  const [login, { error }] = useMutation(LOGIN_USER);\n\n  // update state based on form input changes\n  const handleChange = (event) => {\n    const { name, value } = event.target;\n\n    setFormState({\n      ...formState,\n      [name]: value,\n    });\n  };\n\n  // submit form\nconst handleFormSubmit = async event => {\n  event.preventDefault();\n\n  try {\n    const { data } = await login({\n      variables: { ...formState }\n    });\n  \n    Auth.login(data.login.token);\n  } catch (e) {\n    console.error(e);\n  }\n};\n\n  return (\n    <main className='login flex-row justify-center mb-4'>\n      <div className='col-12 col-md-6'>\n        <div className='logincard'>\n          \n          <div className='login-card-outer'>\n          <h4 className='login-card-header'>Login</h4>\n            <div className='login-card-body'>\n            <form onSubmit={handleFormSubmit}>\n              <input\n                className='form-input'\n                placeholder='Your email'\n                name='email'\n                type='email'\n                id='email'\n                value={formState.email}\n                onChange={handleChange}\n              />\n              <input\n                className='form-input'\n                placeholder='******'\n                name='password'\n                type='password'\n                id='password'\n                value={formState.password}\n                onChange={handleChange}\n              />\n              <button className='btn d-block w-100' type='submit'>\n                Submit\n              </button>\n            </form>\n            </div>\n            {error && <div>Login failed</div>}\n\n          </div>\n        </div>\n      </div>\n    </main>\n  );\n};\n\nexport default Login;\n","import React, { useState } from 'react';\nimport { useMutation } from '@apollo/react-hooks';\nimport { ADD_USER } from '../utils/mutations';\nimport Auth from '../utils/auth';\n\n\n\nconst Signup = () => {\n  const [formState, setFormState] = useState({ username: '', email: '', password: '' });\n  const [addUser, { error }] = useMutation(ADD_USER);\n\n  // update state based on form input changes\n  const handleChange = (event) => {\n    const { name, value } = event.target;\n\n    setFormState({\n      ...formState,\n      [name]: value,\n    });\n  };\n\n  // submit form (notice the async!)\nconst handleFormSubmit = async event => {\n  event.preventDefault();\n\n  try {\n    const { data } = await addUser({\n      variables: { ...formState }\n    });\n  \n    Auth.login(data.addUser.token);\n  } catch (e) {\n    console.error(e);\n  }\n};\n\n  return (\n    <main className='flex-row justify-center mb-4'>\n      <div className='col-12 col-md-6'>\n        <div className='logincard'>\n          <div className='login-card-outer'>\n          <h4 className='login-card-header'>Sign Up</h4>\n          <div className='login-card-body'>\n            <form onSubmit={handleFormSubmit}>\n              <input\n                className='form-input'\n                placeholder='Your username'\n                name='username'\n                type='username'\n                id='username'\n                value={formState.username}\n                onChange={handleChange}\n              />\n              <input\n                className='form-input'\n                placeholder='Your email'\n                name='email'\n                type='email'\n                id='email'\n                value={formState.email}\n                onChange={handleChange}\n              />\n              <input\n                className='form-input'\n                placeholder='******'\n                name='password'\n                type='password'\n                id='password'\n                value={formState.password}\n                onChange={handleChange}\n              />\n              <button className='btn d-block w-100' type='submit'>\n                Submit\n              </button>\n            </form>\n            {error && <div>Sign up failed</div>}\n            </div>\n\n          </div>\n        </div>\n      </div>\n    </main>\n  );\n};\n\nexport default Signup;\n","import React from 'react';\nimport Sub2 from './sub2';\n\nimport Login from './login'\nimport Signup from './signup'\n//import Navbar from '../navbar'\n\n\n//import { QUERY_CARDS } from '../utils/queries';\n//import { useQuery } from '@apollo/react-hooks';\nfunction CardBody(props) {\n    \n  //  const { loading, data} = useQuery(QUERY_USER);\n  //const {  data} = useQuery(QUERY_CARDS);\n  // const user = data?.users || [];\n  // const subject = data?.subjects || [];\n // console.log(subject)\n   \n     function renderCard (tab)  {\n          switch(tab){\n            case 'Your Cards':\n                return <Sub2/>\n           case 'login':\n                return <Login/>\n            case 'signup':\n                return <Signup/>\n            default:\n                return <Sub2/>\n        }\n    } \n     \n    \n    return(\n        <div className=\"bodycontainer\"> \n            <div classname=\"cardContainer\">\n            {renderCard(props.currentPage)}\n            </div>\n             </div>\n    )\n}\n\nexport default CardBody;\n","import React, {useState} from 'react';\n// add these two library import statements\nimport { ApolloProvider } from '@apollo/react-hooks';\nimport ApolloClient from 'apollo-boost';\nimport { ApolloProvider as ApolloHooksProvider } from '@apollo/react-hooks'\n//import { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\n\nimport Navbar from './pages/navbar'\nimport Cardbody from './pages/Cardbody'\nconst client = new ApolloClient({\n  \n  request: operation => {\n    const token = localStorage.getItem('id_token');\n\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : ''\n      }\n    });\n  },\n  uri: '/graphql'\n});\n\n\n\nfunction App() {\n  const [currentPage, handlePageChange] = useState('Login');\n  return (\n    <ApolloProvider client = {client}>\n      <ApolloHooksProvider client={client}>\n        <Navbar currentPage={currentPage} handlePageChange={handlePageChange}></Navbar>\n      <Cardbody currentPage={currentPage} handlePageChange={handlePageChange}></Cardbody>\n      </ApolloHooksProvider>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}